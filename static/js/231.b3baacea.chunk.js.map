{"version":3,"file":"static/js/231.b3baacea.chunk.js","mappings":"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","sources":["webpack://react-hw-05-movies/./src/components/MovieList/movieList.module.css?ccba","components/MovieList/MovieList.jsx","webpack://react-hw-05-movies/./src/components/SearchForm/searchForm.module.css?a515","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"listOfMovies\":\"movieList_listOfMovies__STHBQ\",\"card\":\"movieList_card__Nr0BI\",\"title\":\"movieList_title__Jbv61\"};","import { lazy } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './movieList.module.css';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <ul className={css.listOfMovies}>\n        {movies.map(movie => {\n          return (\n            <li key={movie.id}>\n              <div className={css.card}>\n                <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                  <img\n                    src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n                    alt={movie.title}\n                    loading={lazy}\n                  />\n                  <p className={css.title}>{movie.title}</p>\n                </Link>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default MovieList;","// extracted by mini-css-extract-plugin\nexport default {\"searchBar\":\"searchForm_searchBar__2CbSQ\",\"searchForm\":\"searchForm_searchForm__D2TuG\",\"searchFormButton\":\"searchForm_searchFormButton__+eMfU\",\"searchFormInput\":\"searchForm_searchFormInput__bv6lf\"};","import React, { useState } from 'react';\nimport Notiflix from 'notiflix';\nimport { ImSearch } from 'react-icons/im';\nimport css from './searchForm.module.css';\n\nconst SearchForm = ({ onSubmit }) => {\n  const [value, setValue] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const normQuery = value.trim().toLowerCase();\n    if (!normQuery) {\n      Notiflix.Notify.warning('The query is empty!')\n      return;\n    }\n    onSubmit(normQuery);\n  };\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <header className={css.searchBar}>\n      <form onSubmit={handleSubmit} className={css.searchForm}>\n        <button type=\"submit\" className={css.searchFormButton}>\n        <ImSearch />\n        </button>\n        <input\n          className={css.searchFormInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          value={value}\n          onChange={handleChange}\n        />\n      </form>\n    </header>\n  );\n}\n\nexport default SearchForm;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMovieByTitle } from 'services/api';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport MovieList from 'components/MovieList/MovieList';\n\nconst Movies = () => {\n  const [searchedMovies, setSearchedMovies] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieByTitle = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!movieByTitle) return;\n\n    fetchMovieByTitle(movieByTitle).then(data =>\n      setSearchedMovies(data.results)\n    );\n  }, [movieByTitle]);\n\n  const handleSubmit = async newQuery => {\n    setSearchParams({ query: newQuery });\n  };\n\n  return (\n    <>\n      <header>\n        <SearchForm onSubmit={handleSubmit} />\n      </header>\n      <main>{searchedMovies && <MovieList movies={searchedMovies} />}</main>\n    </>\n  );\n}\n\nexport default Movies;","import axios from 'axios';\n\nconst api_query = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'e56bac74c49b45071b964a5f7a0906aa',\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await api_query.get('/trending/movie/day', {\n      params: { include_adult: false },\n    });\n    return response.data.results;\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport const fetchMovieByTitle = async query => {\n  try {\n    const response = await api_query.get(`/search/movie`, {\n      params: { language: 'en-US', page: 1, include_adult: false, query },\n    });\n    return response.data;\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport const fetchMovieDetails = async movie_id => {\n  try {\n    const response = await api_query.get(`/movie/${movie_id}`, {\n      params: { language: 'en-US' },\n    });\n    return response.data;\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport const fetchCastById = async movie_id => {\n  try {\n    const response = await api_query.get(`/movie/${movie_id}/credits`, {\n      params: { language: 'en-US' },\n    });\n    return response.data.cast;\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport const fetchReviewsById = async movie_id => {\n  try {\n    const response = await api_query.get(`/movie/${movie_id}/reviews`, {\n      params: { language: 'en-US' },\n    });\n    return response.data.results;\n  } catch (error) {\n    return error.message;\n  }\n};\n"],"names":["movies","location","useLocation","className","css","map","movie","to","id","state","from","src","poster_path","alt","title","loading","lazy","onSubmit","useState","value","setValue","event","preventDefault","normQuery","trim","toLowerCase","Notiflix","type","autoComplete","autoFocus","placeholder","onChange","target","searchedMovies","setSearchedMovies","useSearchParams","searchParams","setSearchParams","movieByTitle","get","useEffect","fetchMovieByTitle","then","data","results","handleSubmit","newQuery","query","MovieList","api_query","axios","baseURL","params","api_key","fetchTrendingMovies","include_adult","response","message","language","page","fetchMovieDetails","movie_id","fetchCastById","cast","fetchReviewsById"],"sourceRoot":""}